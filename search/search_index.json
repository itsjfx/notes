{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Notes","text":"<ul> <li>My rip-off of mbailey/notes and my way of \"working with the garage door up\"</li> <li>Things I find useful that I want to share to others, but don't want to go to the effort of writing a blog post for</li> <li>Using Obsidian and mkdocs-material</li> <li>Published here https://notes.jfx.ac</li> </ul>"},{"location":"ai-workflow/","title":"AI Workflow","text":"<ul> <li>ChatGPT<ul> <li>Pay for ChatGPT Plus</li> <li>Good for general questions, live conversations, non-technical things like personal problems</li> <li>Also fine for technical</li> </ul> </li> <li>Anthropic<ul> <li>Sign up for an Anthropic Developer account, you get $5 free credit for a day</li> <li>Install aider and follow the instructions to connect to Anthropic</li> <li>Can pay for Anthropic Plus, but expensive</li> </ul> </li> </ul>"},{"location":"exclusive-stores/","title":"Exclusive stores","text":""},{"location":"exclusive-stores/#education","title":"Education","text":"<p>Requires a <code>.edu.au</code> address</p> <ul> <li>Samsung Education Store</li> <li>Apple Education Store)</li> </ul>"},{"location":"exclusive-stores/#government","title":"Government","text":"<p>Requires a <code>.gov.au</code> email address</p> <ul> <li>Samsung Government Program</li> </ul>"},{"location":"jenkins/","title":"Jenkins","text":""},{"location":"jenkins/#secret-files","title":"Secret Files","text":"<p>Secret files are temporarily output to: <code>/var/lib/jenkins/workspace/JOB_NAME@tmp/secretFiles/GUID/FILENAME</code></p>"},{"location":"markdown/","title":"Markdown","text":""},{"location":"markdown/#markdown-implementations-i-deal-with","title":"Markdown Implementations I deal with","text":"<ul> <li><code>GitHub Flavoured Markdown (GFM)</code>: on GitHub</li> <li>python-markdown: on <code>mkdocs</code></li> </ul>"},{"location":"markdown/#comparing-markdown-implementations","title":"Comparing Markdown implementations","text":"<p>Helpful tool which lets you compare Markdown the output of Markdown implementations:</p> <ul> <li>https://babelmark.github.io/</li> </ul>"},{"location":"matrix/","title":"Matrix","text":""},{"location":"matrix/#generating-registration-tokens","title":"Generating registration tokens","text":"<p>Ref: https://matrix-org.github.io/synapse/latest/usage/administration/admin_api/registration_tokens.html#</p> <p>Grab token from browser or Element desktop via Dev Tools (Ctrl + Shift + I)</p> <pre><code>\u279c  ~  curl -X POST 'https://matrix.jfx.ac/_synapse/admin/v1/registration_tokens/new' -H 'Authorization: Bearer TOKEN' --data-raw '{\"uses_allowed\":10, \"length\": 6\n4}'\n{\"token\":\"x\",\"uses_allowed\":10,\"pending\":0,\"completed\":0,\"expiry_time\":null}\n</code></pre>"},{"location":"pc-specs/","title":"Pc specs","text":""},{"location":"pc-specs/#specs","title":"Specs","text":"<ul> <li>CPU: AMD Ryzen 7 7800X3D</li> <li>CPU Cooler: Noctua NH-U14S  </li> <li>GPU: Gigabyte GeForce RTX 3070 Gaming OC 8GB  </li> <li>MOBO: ASRock X670E Pro RS  </li> <li>RAM: G.Skill Trident Z5 Neo RGB 32GB DDR5 6000mhz CL30  </li> <li>SSD: Samsung 980 Pro M.2 2TB (Linux) / Samsung 970 EVO Plus 1TB (Windows)</li> <li>PSU: Seasonic Prime Ultra 650W Titanium</li> <li>Case: Fractal Design North Charcoal Black Tempered Glass</li> <li>Case Fans: Noctua NF-A14 PWM</li> </ul>"},{"location":"pc-specs/#old","title":"Old","text":"<ul> <li>CPU: Intel Core i7-8700K @ 4.69 GHz  </li> <li>MOBO: ASUS Z370 ROG Maximus X Hero  </li> <li>RAM: Corsair Vengeance DDR4 3200MHz 16GB  </li> <li>Case: Corsair 750D + Window</li> </ul>"},{"location":"rofi/","title":"Rofi","text":"<p>Rofi tips and tricks I've found</p>"},{"location":"rofi/#customising-rows-icons-meta","title":"Customising rows (icons, meta)","text":"<p>You can add icons and invisible search terms easily to your rows in Rofi.</p> <p>See <code>man rofi-script</code> and the <code>Parsing row options</code> section for options you can customise on a row (snippet below):</p> <p>Extra options for individual rows can be set.  The extra option can be specified following the same syntax as mode option, but following the entry.</p> <p>For example:</p> <ul> <li><code>echo -en \"aap\\0icon\\x1ffolder\\n\"</code></li> </ul> <p>The following options are supported:</p> <ul> <li><code>icon</code>: Set the icon for that row.</li> <li><code>meta</code>: Specify invisible search terms.</li> <li><code>nonselectable</code>: If true the row cannot activated.</li> <li><code>info</code>: Info that, on selection, gets placed in the ROFI_INFO environment variable. This entry does not get searched.</li> </ul> <p>Multiple entries can be passed using the \\x1f separator:</p> <ul> <li><code>echo -en \"aap\\0icon\\x1ffolder\\x1finfo\\x1ftest\\n\"</code></li> </ul> <p>For a real example see:</p> <ul> <li>https://github.com/itsjfx/dotfiles/blob/master/scripts/rofi/power-menu.sh<ul> <li></li> </ul> </li> <li>https://github.com/itsjfx/dotfiles/blob/master/scripts/rofi/firefox.sh</li> </ul>"},{"location":"rofi/#saving-an-application-for-search","title":"Saving an application for search","text":"<p>See saving-websites-as-apps</p>"},{"location":"rooting-robot-vacuum/","title":"Rooting a robot vacuum","text":"<p>See these resources:</p> <ul> <li>https://robotinfo.dev -- registry for which model to buy, and details on how to root the model</li> <li>https://builder.dontvacuum.me -- firmware builder</li> <li>https://builder.dontvacuum.me/dreame/faq.txt -- faq</li> <li>https://valetudo.cloud/pages/general/getting-started.html -- valetudo instructions</li> <li>root instructions (differs on your model, see below for dreame/roborock)<ul> <li>https://builder.dontvacuum.me/nextgen</li> <li>https://builder.dontvacuum.me/nextgen/dreame_gen3.pdf (master PDF)</li> <li>https://valetudo.cloud/pages/installation/dreame.html#fastboot (instructions for Valetudo)</li> </ul> </li> <li>home assistant integration<ul> <li>setup MQTT with Valetudo and it'll automatically pick up your robot<ul> <li>https://valetudo.cloud/pages/integrations/home-assistant-integration.html</li> <li>this will give home assistant visibility of your robot</li> </ul> </li> <li>to control the robot, add this card: https://github.com/PiotrMachowski/lovelace-xiaomi-vacuum-map-card<ul> <li>the best card for controlling your robot, like-for-like to the native application, if not better</li> <li>you can customise pretty much anything (including zone placement on the map, icons, etc)</li> </ul> </li> <li>to get your map on the card, follow these steps:<ul> <li>https://github.com/PiotrMachowski/lovelace-xiaomi-vacuum-map-card/blob/master/docs/templates/hypferValetudo.md</li> <li>install this plugin via HACS: https://github.com/sca075/valetudo_vacuum_camera</li> <li>configure your <code>calibration_source</code> like below from the <code>README</code></li> <li>your robot should appear with the correct map</li> </ul> </li> </ul> </li> </ul> <pre><code>type: custom:xiaomi-vacuum-map-card\nentity: vacuum.valetudo_yourvacuum\nvacuum_platform: Hypfer/Valetudo\nmap_source:\n  camera: camera.valetudo_vacuum_camera \ncalibration_source: \n  camera: true \ninternal_variables: \n  topic: valetudo/your_topic  \n</code></pre>"},{"location":"rooting-robot-vacuum/#notes-for-dreame-l10s-ultra-rooting","title":"Notes for Dreame L10s Ultra rooting","text":"<p>TLDR: other than the USB 2.0 shenanigans mentioned earlier, it was pretty smooth... make sure you actually have a USB 2.0 port. Make sure you read the PDF completely and understand the steps.</p> <ul> <li>it went pretty well following the PDF: https://builder.dontvacuum.me/nextgen/dreame_gen3.pdf<ul> <li>make sure you follow the instructions in order clearly, and you read ahead</li> <li>make sure you got the commands preprepared for when you use <code>fastboot</code><ul> <li>there's a cheatsheet here with the commands you need: https://builder.dontvacuum.me/nextgen/fastboot-cheatcheat.txt</li> </ul> </li> </ul> </li> <li>you cannot do UART, so have to do USB with debug pins method</li> <li>it only grounded correctly if i grounded <code>BOOT_SEL</code> to the ground pin on the bottom row (4th one at the bottom)<ul> <li></li> <li>you'll know if it's grounded correctly/in debug mode cause the robot lights will start flashing and no jingle/sound will play</li> </ul> </li> <li>to get a usb 2.0 cable, i grabbed a old mouse, opened it up and pulled the USB cable out of the PCB plug</li> <li>suggest taping the 5v on the USB A (first pin) just in case the red wire is not the 5v one, so you don't fry anything<ul> <li>https://www.wikiwand.com/en/USB_hardware#Pinouts</li> <li></li> <li>https://www.electroschematics.com/usb-how-things-work/</li> </ul> </li> <li>i did it on windows 11, with a USB 2.0 port<ul> <li>turns out a USB 2.0 port is super important</li> <li>you will find that you cannot flash the <code>boot1</code> img later if it's over usb 3.0+</li> <li>unfortunately i had no usb2.0 port... despite what the instructions say I tried using usb C hub which had a usb 2.0 port on it</li> <li>after replugging the cable a bunch of times it let me flash <code>boot1</code> via theh ub</li> <li>if you see: <code>FAILED (data write failure (Unknown error))</code> it's cause you need USB 2.0 for the flash</li> </ul> </li> <li>if the device is not showing up in <code>fastboot</code> or being weird, you probably need to install the drivers mentioned in the PDF</li> <li>it looks like the robot will exit debug mode after a few mins after you disconnect the <code>BOOT_SEL</code> pin and flash the firmware, so you might need to reboot it a few times if you're slow. you want to reboot and run the <code>fastboot flash</code> commands as quickly as possible later on</li> <li>copy everything you run down in the terminal into notepad or somewhere safe</li> <li>backup important stuff, from faq txt file</li> </ul> <pre><code>'dd if=/dev/by-name/private | gzip -9 &gt; /tmp/backup_private.dd.gz'\n'dd if=/dev/by-name/misc | gzip -9 &gt; /tmp/backup_misc.dd.gz'\n</code></pre> <ul> <li>copy off via SCP or with the valetudo web server https://github.com/Hypfer/valetudo-helper-httpbridge</li> <li>don't lose your ssh credentials, write down the root password, or keep an ssh key</li> </ul>"},{"location":"saving-websites-as-apps/","title":"Saving websites as applications on Linux","text":"<p>I wanted to save the Steam Chat as a app. Easy to do in Chrome:</p> <ul> <li>Menu -&gt; More tools -&gt; Create shortcut</li> <li>It'll create an <code>.application</code> file in <code>~/.local/share/applications/</code> with the <code>favicon</code> saved -- meaning it'll be automatically picked up by Rofi :D</li> </ul>"},{"location":"sed/","title":"sed","text":""},{"location":"sed/#use-another-character-instead-of-for-regex","title":"Use another character instead of <code>/</code> for regex","text":"<p>https://www.gnu.org/software/sed/manual/sed.html#The-_0022s_0022-Command</p> <pre><code>The / characters may be uniformly replaced by any other single character within any given s command. The / character (or whatever other character is used in its stead) can appear in the regexp or replacement only if it is preceded by a \\ character.\n</code></pre> <p>e.g. <code>echo blargh | sed 's#blargh#hello#'</code> is valid</p>"},{"location":"steam/","title":"Steam","text":"<p>Making Steam less shit</p>"},{"location":"steam/#enable-fps-meter","title":"Enable FPS Meter","text":"<p>CS2 has no FPS meter so you need to turn it on in Steam</p> <ol> <li>Steam Settings and select \"In Game\"</li> <li>In-game FPS Counter -&gt; <code>Top-right</code></li> <li>In-game FPS Counter High Contrast Color -&gt; <code>On</code></li> </ol>"},{"location":"steam/#set-library-as-default","title":"Set \"Library as default\"","text":"<p>Like old Steam:</p> <ol> <li>Steam Settings and select \"Interface\"</li> <li>Start up Location -&gt; <code>Library</code></li> </ol>"},{"location":"steam/#fix-taskbar-menu","title":"Fix taskbar menu","text":"<p>Clean up crap in the task bar menu and add \"Servers\"</p> <ol> <li>Steam Settings and select \"Interface\"</li> <li>Show task bar preferences at the bottom</li> <li>Select the following<ol> <li>Store</li> <li>Library</li> <li>Community</li> <li>Friends</li> <li>Servers</li> <li>Settings</li> <li>Exit Steam</li> </ol> </li> </ol>"},{"location":"steam/#set-download-region-correctly","title":"Set download region correctly","text":"<p>Double check your download region is home city</p> <ol> <li>Steam Settings and select \"Downloads\"</li> <li>Check \"Download Region\"</li> </ol>"},{"location":"steam/#disable-download-rates-in-bits-per-second","title":"Disable download rates in bits per second","text":"<ol> <li>Steam Settings and select \"Downloads\"</li> <li>Display download rates in bits per second -&gt; <code>Off</code></li> </ol>"},{"location":"steam/#turn-off-remote-play","title":"Turn off Remote Play","text":"<ol> <li>Steam Settings and select \"Remote Play\"</li> <li>Enable Remote Play -&gt; <code>Off</code></li> </ol>"},{"location":"systemd/","title":"systemd","text":""},{"location":"systemd/#check-if-a-service-is-not-installed","title":"Check if a service is not installed","text":"<pre><code>if ! sudo systemctl cat xxx.service &amp;&gt;/dev/null; then\n    ...\nfi\n\nsudo systemctl enable --now xxx.service\n</code></pre>"},{"location":"thinkpad/","title":"Lenovo Thinkpad","text":""},{"location":"thinkpad/#research","title":"Research","text":"<ul> <li>Thinkpad T14 Gen 1 Intel is a terrible choice due to thermals<ul> <li>https://www.reddit.com/r/thinkpad/comments/igcnd3/thinkpad_t14_intel_why_i_returned_it_after_2_days</li> <li>https://www.reddit.com/r/thinkpad/comments/x4zrz2/buying_advice_for_t14_gen1intel</li> </ul> </li> <li>Did not research further: Thinkpad X13 with 10 gen i7 and 32 GB of RAM for ~$650-700</li> </ul>"},{"location":"thinkpad/#t490s","title":"T490s","text":"<ul> <li>Bought: Thinkpad T490s off eBay for ~$470 AUD Feb 2024</li> <li>8th Gen i7</li> <li>32 GB RAM (non-upgradeable)</li> <li>4G/LTE</li> <li>WiFi 5</li> <li>https://psref.lenovo.com/syspool/Sys/PDF/ThinkPad/ThinkPad_T490s/ThinkPad_T490s_Spec.PDF</li> </ul>"},{"location":"tmux/","title":"Tmux","text":""},{"location":"tmux/#ctrl-shift-tab-hotkey-broken","title":"Ctrl Shift Tab hotkey broken","text":"<p>If your Ctrl + Shift + Tab hotkey is broken and bound as <code>C-S-Tab</code>, replace it with <code>C-BTab</code></p> <p>e.g. <code>bind-key -n C-BTab previous-window</code></p> <p>See: https://github.com/tmux/tmux/issues/4136#issuecomment-2394260822</p> <p>Broke in <code>tmux 3.5</code> around Sept of 2024</p>"},{"location":"tmux/#debugging","title":"Debugging","text":"<pre><code>cd /tmp\ntmux kill-server\ntmux -vv new\n</code></pre> <p>Will write verbose logs. For troubleshoot hotkeys, <code>tmux-server.log</code> is a helpful.</p>"},{"location":"toyota-headunit-replacement/","title":"Toyota Headunit Replacement","text":"<p>Equipment:</p> <ul> <li>Headunit: https://amzn.asia/d/7Z00e6r $100</li> <li>Fascia: Aliexpress $30 (can be cheaper)</li> <li>ISO Harness: https://autobarn.com.au/ab/Autobarn-Category/Shop-our-Full-Range-by-Brand-at-Autobarn/Aerpro/Aerpro-ISO-Harness---APP0141/p/AU01078 $20</li> </ul> <p>Details:</p> <ul> <li>Total is $150 AUD</li> <li>Takes ~30 minutes to replace</li> <li>CarPlay + Android Auto</li> </ul>"},{"location":"travelling-essentials/","title":"Travelling Essentials","text":"<p>WIP</p>"},{"location":"travelling-essentials/#hygeine","title":"Hygeine","text":"<ul> <li>Toothpaste</li> <li>Toothbrush</li> <li>Floss</li> <li>Shampoo (small)</li> <li>Body Wash (small)<ul> <li>You never know when you'll run out and you'll be glad to have it</li> </ul> </li> <li>Skincare</li> <li>Skincare apply pads</li> </ul>"},{"location":"travelling-essentials/#stuff","title":"Stuff","text":"<ul> <li>Sunscreen</li> <li>Bug spray<ul> <li>If going tropical</li> </ul> </li> </ul>"},{"location":"travelling-essentials/#technology","title":"Technology","text":"<ul> <li>GL INet Router</li> <li>Power adapters (prioritise smaller ones to save space, and bring at least one universal adapter just in case)</li> <li>A laptop to watch movies on</li> <li>Multi USB C charger</li> <li>HDMI Cable</li> <li>Type C Dongle</li> </ul>"},{"location":"vscode/","title":"VS Code","text":""},{"location":"vscode/#vim-plugin","title":"Vim plugin","text":"<ul> <li><code>gd</code> go to definition</li> <li><code>gh</code> hover to see info / attributes</li> </ul>"},{"location":"weechat/","title":"Weechat","text":"<ul> <li>https://wiki.archlinux.org/title/WeeChat</li> <li>https://gist.github.com/atoponce/f19666d6b206a10b411b97381a1861a1</li> <li>https://blog.weechat.org/post/2008/10/25/Smart-IRC-join-part-quit-message-filter</li> </ul> <p>TODO make these a dotfiles</p> <pre><code>/plugin unload xfer\n/set weechat.plugin.autoload *,!xfer\n\n/set irc.ctcp.action \"\"\n/set irc.ctcp.clientinfo \"\"\n/set irc.ctcp.finger \"\"\n/set irc.ctcp.ping \"\"\n/set irc.ctcp.source \"\"\n/set irc.ctcp.time \"\"\n/set irc.ctcp.userinfo \"\"\n/set irc.ctcp.version \"\"\n\n/set irc.server_default.msg_part \"\"\n/set irc.server_default.msg_quit \"\"\n\n/set irc.look.smart_filter on\n/filter add irc_smart * irc_smart_filter *\n\n/save\n</code></pre>"},{"location":"yubikey/","title":"Yubikey","text":""},{"location":"yubikey/#stopping-the-yubisneeze","title":"Stopping the Yubisneeze","text":"<p>You want to remove the default <code>otp</code> configured in slot 1 (when you tap the key)</p> <p><code>ykman otp delete 1</code></p> <p>Online people may suggest: <code>ykman config usb --disable otp</code> -- this will disable <code>otp</code> entirely and it may be useful to keep enabled if you wish to use <code>otp</code> in the future.</p> <p>See: <code>ykman otp info</code> to see otp slots</p>"},{"location":"aws/ssm/","title":"AWS Systems Manager / SSM","text":""},{"location":"aws/ssm/#automation-runbooks","title":"Automation runbooks","text":"<p>Amazon offer a bunch of automation documents which can be used with AWS config to remediate resources.</p> <p>https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-runbook-reference.html</p>"},{"location":"aws/ssm/#session-manager","title":"Session Manager","text":"<pre><code>session-manager-plugin csSessionData awsregion StartSession profile_name/'' https://ssm.awsregion.amazonaws.com\n</code></pre>"},{"location":"blue-yeti/","title":"Blue Yeti","text":""},{"location":"blue-yeti/#blue-yeti-showing-as-usb-advanced-audio-device","title":"Blue Yeti showing as USB Advanced Audio Device","text":"<p>This is cause the EEPROM on the Blue Yeti has been wiped. Instructions to fix:</p> <p>Sources:</p> <ul> <li>https://www.youtube.com/watch?v=RzuMYxhqIEs</li> <li> <p>https://samsontech.zendesk.com/hc/en-us/articles/224920547-Meteor-Mic-Fix-for-Windows</p> <ul> <li>https://samsontech.zendesk.com/hc/en-us/article_attachments/210570827</li> </ul> </li> <li> <p>Get firmware from eeprom/firmware.bin or get a friend to extract it</p> <ol> <li>To extract it: follow the steps below, but select <code>EEPROM -&gt; FILE</code></li> </ol> </li> <li>Run <code>Config6400.exe</code> tool<ol> <li>This comes from the Samson Technologies link above</li> </ol> </li> <li>In Device Manager<ol> <li>Select the Mic (<code>USB Advanced Audio Device</code>)</li> <li>Details</li> <li>Last known parent</li> <li>Extract values after <code>VID_</code> and <code>PID_</code> </li> <li>Mine are <code>08dc</code> and <code>016c</code></li> </ol> </li> <li>Fill in the values at the bottom of the Config tool</li> <li>Press <code>FILE -&gt; EEPROM</code></li> <li>Select the <code>.bin</code> file</li> <li>Re-plug the device</li> <li>Should be fixed</li> </ul>"},{"location":"embedded/rpi-pico/","title":"Rpi Pico","text":""},{"location":"embedded/rpi-pico/#web-server-wifi","title":"Web server + WiFi","text":"<pre><code>import network\nimport socket\nfrom time import sleep\nfrom picozero import pico_temp_sensor, pico_led\nimport machine\nimport rp2\nimport sys\n\nssid = 'XXXX'\npassword = 'XXXX'\n\ndef open_socket(ip):\n    # Open a socket\n    address = (ip, 80)\n    s = socket.socket()\n    s.bind(address)\n    s.listen(1)\n    return s\n\n\ndef connect():\n    #Connect to WLAN\n    wlan = network.WLAN(network.STA_IF)\n    wlan.active(True)\n    wlan.connect(ssid, password)\n    while wlan.isconnected() == False:\n        if rp2.bootsel_button() == 1:\n            sys.exit()\n        print('Waiting for connection...')\n        pico_led.on()\n        sleep(0.5)\n        pico_led.off()\n        sleep(0.5)\n    ip = wlan.ifconfig()[0]\n    print(f'Connected on {ip}')\n    pico_led.on()\n    return ip\n\ndef serve(s):\n    #Start a web server\n    while True:\n        conn, addr = s.accept()\n        request = conn.recv(1024).decode()\n        print('Request:', request)\n\n        response = ['HTTP/1.1 200 OK', 'Content-Type: text/plain', '', 'yo yo']\n        conn.send('\\r\\n'.join(response))\n        conn.close()\n\nip = connect()\ns = open_socket(ip)\nserve(s)\n</code></pre>"},{"location":"embedded/rpi-pico/#triggering-via-stdin-over-tty","title":"Triggering via STDIN over tty","text":"<pre><code>import select\nimport sys\n\nimport utime\nimport machine\n\nswitch_pin = machine.Pin(2, machine.Pin.OUT, value=1)  # GPIO2 as an output, default HIGH\n\ndef trigger_switch():\n    switch_pin.value(0)  # \"Press\" the button (short to ground)\n    utime.sleep(0.1)\n    switch_pin.value(1)  # \"Release\" the button (disconnect)\n\nwhile True:\n    if select.select([sys.stdin],[],[],0)[0]:\n        cmd = sys.stdin.readline().strip()\n        print('stdin', cmd)\n        #if cmd == \"trigger\":\n        print('running trigger')\n        trigger_switch()\n    utime.sleep(0.1)\n</code></pre>"},{"location":"fido2/azure-ad/","title":"FIDO2 Azure AD / Entra ID","text":""},{"location":"fido2/azure-ad/#fido2-linux-firefox-azure-ad-entra-id-fix","title":"FIDO2 Linux Firefox Azure AD / Entra ID Fix","text":"<p>FIDO2 is enabled by default and supported in Firefox as of 114.0</p> <p>However the Azure login website (at this time, 17 Aug 2023) still does not support FIDO2 on Firefox on Linux as it glitches out. </p> <p>We couldn't verify you or the key you used. If you are using a security key, make sure this is your key and try again.</p> <p>If you use Tampermonkey or Greasemonkey and this gist I wrote -- you can override some JS variables on the Azure login to allow it to work.</p> <p>https://gist.github.com/itsjfx/e9e63130ba17a180a2e42294a2d955d5/ </p> <p>Raw link for Tampermonkey or Greasemonkey</p> <p>Azure's website (on the server side) will stop FIDO2 from working for Firefox as it'll detect your user agent.</p> <p>Another workaround is to set your user agent to Chrome on Linux (e.g. <code>general.useragent.override</code> or with an addon) and it'll work as expected</p>"},{"location":"fido2/azure-ad/#failure","title":"Failure","text":"<p>TODO write a blog post on how I dug into this</p> <p>Microsoft's FIDO2 code throws <code>The operation failed for an unknown transient reason</code> after doing a <code>window.navigator.credentials.get()</code> (thanks justinsteven for the summary)</p>"},{"location":"fido2/git/","title":"FIDO2 + Git","text":"<ul> <li>A script to create an SSH key and on-board it to GitHub</li> <li>Supports authentication and signing</li> <li>Thanks Mike</li> <li>Usage: <code>./bin/extras/git/git-fido-ssh itsjfx-github@x x@x.com itsjfx</code></li> </ul> <p>https://github.com/bash-my-aws/bash-my-aws/tree/dev/bin/extras/git</p> <p>Some fixes:</p> <pre><code>diff --git a/bin/extras/git/git-fido-ssh b/bin/extras/git/git-fido-ssh\nindex 3e4fbe1..52b1c00 100755\n--- a/bin/extras/git/git-fido-ssh\n+++ b/bin/extras/git/git-fido-ssh\n@@ -5,7 +5,7 @@\n #                updates Git user details based on realm, and manages SSH configurations.\n #\n # Usage: ./git-fido-ssh keyid@realm [git-email] [git-name]\n-# \n+#\n #       keyid: Any word to identify your Yubikey to you (e.g. key1)\n #       realm: security domain or organization (e.g. personal, work, mycompany)\n #\n@@ -13,13 +13,16 @@\n #\n # - GitHub CLI (gh) - https://cli.github.com/\n\n+# set -eu -o pipefail\n+set -x\n+\n git-fido-ssh() {\n     local keyid_realm=\"$1\"\n     local git_email=\"$2\"\n     local git_name=\"$3\"\n\n\n-    local keyid=\"${keyid_realm%@*}\"\n-    local realm=\"${keyid_realm#*@}\"\n+    local realm=\"${keyid_realm%@*}\"\n+    local keyid=\"${keyid_realm#*@}\"\n     local key_path=\"$HOME/.ssh/${keyid_realm}\"\n     local git_config_path=\"$HOME/.gitconfig_${realm}\"\n     local ssh_config_file=\"$HOME/.ssh/config.d/${realm}\"\n@@ -41,7 +44,7 @@ git-fido-ssh() {\n             fi\n         else\n             # Fetch the current GitHub username\n-            echo \"$auth_status\" | grep 'Logged in to github.com as'\n+            echo \"$auth_status\" | grep 'Logged in to github.com'\n\n             read -p \"Do you want to continue with this account? (y/n) \" choice\n\n@@ -88,10 +91,10 @@ git-fido-ssh() {\n     fi\n\n     if [[ ! -f \"$key_path\" ]]; then\n\n-        ssh-keygen -t ecdsa-sk -b 521 -C \"${keyid_realm}\" -f \"$key_path\"\n+        ssh-keygen -t ed25519-sk -C \"${keyid_realm}\" -f \"$key_path\"\n         symlink_path=\"$(dirname $key_path)/${keyid_realm}\"\n         echo \"SSH key generated at $key_path\"\n-        (cd $(dirname $key_path) &amp;&amp; ln -sf \"$keyid_realm\" \"${realm}\") # so we can use generic name\n+        # (cd $(dirname $key_path) &amp;&amp; ln -sf \"$keyid_realm\" \"${realm}\") # so we can use generic name\n     else\n         echo \"Error: Key file $key_path already exists.\"\n         return 1\n@@ -100,7 +103,8 @@ git-fido-ssh() {\n     eval \"$(ssh-agent -s)\"\n     ssh-add \"$key_path\"\n     check_and_switch_github_account\n-    gh ssh-key add \"${key_path}.pub\" -t \"${keyid_realm}\"\n+    gh ssh-key add \"${key_path}.pub\" -t \"${keyid_realm}\" --type authentication\n+    gh ssh-key add \"${key_path}.pub\" -t \"${keyid_realm}\" --type signing\n     create_ssh_config\n\n     if [[ -f \"$git_config_path\" ]]; then\n</code></pre>"},{"location":"fido2/github/","title":"FIDO2 GitHub","text":"<p>https://github.com/settings/security -&gt; PassKeys</p>"},{"location":"fido2/github/#passkey-registration-failed-on-firefox","title":"\"Passkey registration failed\" on Firefox","text":"<p>Using a new FIDO key?</p> <p>If will receive this error cause Firefox doesn't support setting up the PIN for a hardware key. You can set it up using <code>ykman</code> like so:</p> <p><code>ykman fido access change-pin</code></p> <p>and try again</p> <p>More discussion here: https://github.com/orgs/community/discussions/67791</p>"},{"location":"fido2/github/#multiple-accounts-on-a-single-fido2-device","title":"Multiple accounts on a single FIDO2 device","text":"<p>You can have multiple accounts on a single FIDO2 device!</p> <p></p> <p>The GitHub sends a FIDO2 challenge with an empty <code>allowCredentials</code> argument</p> <pre><code>{\n    \"publicKey\": {\n        \"challenge\": x,\n        \"timeout\": 60000,\n        \"rpId\": \"github.com\",\n        \"allowCredentials\": [],\n        \"userVerification\": \"required\"\n    }\n}\n</code></pre> <p>I got the above following Monkey patching</p> <p>See the webauthn2 spec for more info:</p> <p>The Relying Party invokes navigator.credentials.get() with an empty allowCredentials argument. This means that the Relying Party does not necessarily need to first identify the user. As a consequence, a discoverable credential capable authenticator can generate an assertion signature for a discoverable credential given only an RP ID, which in turn necessitates that the public key credential source is stored in the authenticator or client platform.</p>"},{"location":"github/CLI/","title":"CLI","text":""},{"location":"github/CLI/#requests","title":"Requests","text":"<p>Can capture requests easily with HTTPS_PROXY and <code>mitmproxy</code></p>"},{"location":"github/CLI/#token","title":"Token","text":"<p>You can get a token pretty easily with <code>gh auth token</code>, and use it in other scripts (:</p>"},{"location":"github/actions/","title":"Actions","text":""},{"location":"github/actions/#deploy-to-github-pages-without-a-branch","title":"Deploy to GitHub Pages without a branch","text":"<p>Previously you could only deploy to GitHub pages with a branch, meaning your repo was larger than it needed to be, even after rewriting history to have a single commit.</p> <p>Now you can use a workflow similar to: https://github.com/itsjfx/jfx.ac/blob/master/.github/workflows/hugo.yaml to create an artifact in CI (similar to a release) then deploy from that artifact.</p> <p>Doc: https://docs.github.com/en/pages/getting-started-with-github-pages/using-custom-workflows-with-github-pages</p>"},{"location":"github/actions/#injection-prevention","title":"Injection prevention","text":"<p>https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable</p> <p>I suggest passing ANY GitHub variables into an environment variable, then evaluate the variables with quotes in Bash. This is a good habit as you won't need to think too hard whether input is trusted or not.</p> <p>e.g.</p> <pre><code>\n      - name: Check PR title\n        env:\n          TITLE: ${{ github.event.pull_request.title }}\n        run: |\n          if [[ \"$TITLE\" =~ ^octocat ]]; then\n          echo \"PR title starts with 'octocat'\"\n          exit 0\n          else\n          echo \"PR title did not start with 'octocat'\"\n          exit 1\n          fi\n</code></pre>"},{"location":"homelab/","title":"Homelab","text":"<ul> <li>Tapo C310 Camera setup with Frigate</li> <li>AdGuard Home DNS</li> </ul>"},{"location":"homelab/adguard-home/","title":"AdGuard Home","text":"<p>AdGuard Home is my DNS server of choice. I run two instances: one on a PI on my local network and on my VPS which is running WireGuard.</p> <p>Things I like:</p> <ul> <li>Interface is nice</li> <li>Controllable via API if needed</li> <li>A simple and very advanced way of doing DNS rewrites<ul> <li>https://github.com/AdguardTeam/AdGuardHome/wiki/Hosts-Blocklists</li> <li>I have different VLANs and subnets and can control how rules are applied with a central DNS server, it's very handy</li> </ul> </li> <li>There is also a rule tester on the custom filtering rules page. You can specify client and domain name to lookup, which is super helpful for troubleshooting</li> <li>Query log viewer</li> <li>Decent stats</li> </ul> <p>Advanced rules examples:</p> <pre><code># override medusa for main\n||medusa^$dnsrewrite=192.168.88.9,client=192.168.88.0/24\n||medusa.home.jfx.ac^$dnsrewrite=192.168.88.9,client=192.168.88.0/24\n\n# override medusa for iot\n||medusa^$important,dnsrewrite=192.168.20.2,client=192.168.20.0/24\n||medusa.home.jfx.ac^$important,dnsrewrite=192.168.20.2,client=192.168.20.0/24\n\n# override ntp for iot\n||pool.ntp.org^$important,dnsrewrite=192.168.88.3,client=192.168.20.0/24\n\n# drop all DNS lookups in iot\n# except for ntp (gets rewritten to egg NTP server)\n# medusa (home assistant, frigate, etc)\n# and except for smart blinds (needs internet)\n||*^$dnsrewrite=NXDOMAIN;;,denyallow=pool.ntp.org|medusa|medusa.home.jfx.ac,client=192.168.20.0/24|~192.168.20.11\n</code></pre>"},{"location":"homelab/athom-plugs/","title":"Athom Plugs","text":"<p>I use some Athom Plug V2 AU plugs. These were all bought sometime in 2024</p>"},{"location":"homelab/athom-plugs/#appearing-as-sonoff-device-after-firmware-upgrade","title":"Appearing as \"Sonoff Device\" after firmware upgrade","text":"<ul> <li>I did a firmware upgrade and it set the device name to \"Sonoff Device\"</li> <li>I lost the ability to do power monitoring in Home Assistant</li> <li>Turns out you need to reconfigure the \"template\" on the Tasmota firmware</li> <li>A template in Tasmota is the definition of the device</li> <li>https://tasmota.github.io/docs/Templates</li> </ul> <p>To fix:</p> <ol> <li>Follow https://tasmota.github.io/docs/Templates/#importing-templates</li> <li>If you got a multi pack, export the template for a working device, and input the value in the broken device</li> <li>Otherwise, if you don't have access to a multi-pack, you can input the following:<ol> <li><code>{\"NAME\":\"Athom Plug V2\",\"GPIO\":[0,0,0,3104,0,32,0,0,224,576,0,0,0,0],\"FLAG\":0,\"BASE\":18}</code> if shipped after 20 Jan 2022</li> <li><code>{\"NAME\":\"Athom Power Monitoring Plug\",\"GPIO\":[0,0,0,32,2720,2656,0,0,2624,544,224,0,0,1],\"FLAG\":0,\"BASE\":18}</code> if shipped before 20 Jan 2022</li> </ol> </li> <li>Your device will reboot and Home Assistant will work as expected</li> </ol> <p>Source for template data: https://www.athom.tech/blank-1/au-plug (on page)</p>"},{"location":"homelab/tapo-camera/","title":"Tapo Camera setup with Frigate","text":"<ol> <li>Buy PoE splitter and injector, make sure it supports up to 9 volts and 0.6 amps<ol> <li>Bullet head shaped</li> <li>The Tapo does not have native PoE, so you need to inject the CAT cable with power then break it out at the end</li> <li>I bought these, they work well, cheap and came quickly: https://www.ebay.com.au/itm/322408095795</li> <li>~$8 AUD each, can probably find on AliExpress cheaper</li> </ol> </li> <li>Connect device to internet VLAN, link it to your Tapo account on app</li> <li>Adjust on-screen settings to match your other cameras</li> <li>Do firmware update</li> <li>Set up auto-reboot for an appropriate time<ol> <li>You should really do this, otherwise the camera cuts out a bunch</li> </ol> </li> <li>Setup RTSP</li> <li>Cut it over to IoT VLAN<ol> <li>You should allow NTP, or rewrite <code>*.pool.ntp.org</code> to a local time server</li> </ol> </li> </ol> <p>At the moment I'm having issues where it drops Ethernet connection. I'm seeing if this is localised to a single camera. I may get a smart plug + power board and power cycle the devices myself.</p>"},{"location":"javascript/","title":"JavaScript","text":""},{"location":"javascript/#inject-javascript-into-a-browser","title":"Inject JavaScript into a browser","text":"<p>This snippet is not as useful if the site blocks <code>script-src</code> in their CSP, and Tampermonkey and Greasemonkey are much better: </p> <pre><code>const code = `\n    console.log('hello');\n`;\n\nconst script = document.createElement('script');\nscript.textContent = code;\n(document.documentHead || document.documentElement).appendChild(script);\nscript.remove();\n</code></pre>"},{"location":"javascript/#monkey-patching","title":"Monkey patching","text":"<p>Simple monkey patching, prints <code>args</code> and <code>results</code> to <code>stdout</code>.</p> <p>Using the script above or a user script, you can monkey patch easily in the browser and in Node.</p> <p>e.g. to monkey patch an <code>async</code> browser method:</p> <pre><code>const _get = navigator.credentials.get;\n\nnavigator.credentials.get = async function(...args) {\n    // modify the arguments how you want. arguments is also set\n    // on a browser, you probably want to JSON.stringify() this so it stays in history, otherwise you will lose the value\n    // however logging the actual value is helpful to see object prototypes etc\n    console.log('args', args, JSON.stringify(args));\n\n    let res = await _get.apply(this, args);\n\n    // modify the return value\n    console.log('res', res, JSON.stringify(res));\n    return res;\n}\n</code></pre>"},{"location":"javascript/timeout/","title":"Timeouts","text":""},{"location":"javascript/timeout/#unref","title":"Unref","text":"<p><code>timeout.unref()</code></p> <p>When called, the active <code>Timeout</code> object will not require the Node.js event loop to remain active. If there is no other activity keeping the event loop running, the process may exit before the <code>Timeout</code> object's callback is invoked. Calling <code>timeout.unref()</code> multiple times will have no effect</p>"},{"location":"javascript/void/","title":"JavaScript void","text":"<pre><code>const doSomething = () =&gt; void someOtherFunction();\n</code></pre>"},{"location":"ldac/","title":"Index","text":"<p>High quality earbuds might have LDAC support.</p> <p>Might need to enable in your vendors audio app: ![[Screenshot_20240926_001419_Technics Audio Connect.jpg]] ![[Screenshot_20240926_001503_Technics Audio Connect.jpg]]</p> <p>Then enable in Android Bluetooth:</p> <p>![[Screenshot_20240926_001406_Settings.jpg]]</p> <p>There's more settings in Developer Options you can tune. Enable Developer Options to see and search for LDAC.</p>"},{"location":"linux/install/","title":"Linux Install","text":"<p>https://xkcd.com/538/</p> <p></p> <p>These are rough notes written for me, hope it helps somebody.</p> <p>I'm currently running Arch Linux on my desktop, but this would be applicable to Fedora with a minimal install (somewhat) etc.</p> <p>I wanted my Linux install to have these things:</p> <ul> <li><code>UEFI</code> and <code>GPT</code></li> <li><code>systemd-boot</code> instead of <code>GRUB</code></li> <li><code>btrfs</code> with subvolumes</li> <li>trying out <code>zstd:1</code><ul> <li>default on Fedora</li> </ul> </li> <li>https://man.archlinux.org/man/btrfs.5#COMPRESSION_LEVELS</li> <li>support for <code>btrfs</code> snapshots in the future if I want them</li> <li><code>LUKS2</code> encrypted main partition</li> <li>unencrypted <code>/boot</code><ul> <li>see xkcd</li> </ul> </li> <li>no LVM<ul> <li>similar to https://fedoraproject.org/wiki/Changes/BtrfsByDefault#Detailed_Description</li> </ul> </li> <li>dual boot with Windows</li> <li>secure boot (not done right now)<ul> <li>https://wiki.archlinux.org/title/dm-crypt/Encrypting_an_entire_system#LUKS_on_a_partition_with_TPM2_and_Secure_Boot</li> </ul> </li> </ul> <p>Based off:</p> <ul> <li>https://wiki.archlinux.org/title/installation_guide</li> <li>https://wiki.archlinux.org/title/dm-crypt/Encrypting_an_entire_system#LUKS_on_a_partition</li> <li>https://itsfoss.com/install-arch-linux/</li> <li>https://github.com/egara/arch-btrfs-installation</li> <li>https://fogelholk.io/installing-arch-with-lvm-on-luks-and-btrfs/</li> <li>https://gist.github.com/OdinsPlasmaRifle/e16700b83624ff44316f87d9cdbb5c94</li> </ul>"},{"location":"linux/install/#todo","title":"TODO","text":"<ul> <li>BTRFS snapshots and restore</li> </ul>"},{"location":"linux/install/#arch-installation","title":"Arch Installation","text":"<ul> <li>Disable the PC speaker (depending on PC, this is annoying): <code>rmmod pcspkrZZZZ</code></li> <li>Follow the Arch Installation Guide, check here for steps changes</li> </ul>"},{"location":"linux/install/#pre-installationset-the-console-keyboard-layout-and-font","title":"Pre-installation/Set the console keyboard layout and font","text":"<p>Ignore this</p>"},{"location":"linux/install/#pre-installationpartition-the-disks","title":"Pre-installation/Partition the disks","text":""},{"location":"linux/install/#partition","title":"Partition","text":"<p>Based on:</p> <ul> <li>https://wiki.archlinux.org/title/dm-crypt/Encrypting_an_entire_system#LUKS_on_a_partition</li> <li> <p>https://github.com/egara/arch-btrfs-installation</p> </li> <li> <p>Where <code>BOOT_PARTITION</code> is boot partition</p> </li> <li>Where <code>ROOT_PARTITION</code> is root/data partition</li> </ul> <pre><code>+-----------------------+------------------------+\n| Boot partition        | LUKS2 encrypted root   |\n|                       | partition              |\n|                       |                        |\n| /boot                 | /                      |\n|                       |                        |\n|                       | /dev/mapper/root       |\n|                       |------------------------|\n| /dev/BOOT_PARITTION   | /dev/ROOT_PARTITION    |\n+-----------------------+------------------------+\n</code></pre> <ol> <li>Provision the drive with <code>fdisk DRIVE</code>, find with <code>fdisk -l</code></li> <li>Delete existing partitions (use <code>d</code>) ? I think 3. handles this</li> <li>Type <code>g</code> to create a <code>GPT</code> drive</li> <li>Make EFI partition<ol> <li>Press <code>n</code></li> <li>Partition type: Primary</li> <li>Partition number: 1</li> <li>First sector: continue</li> <li>Last sector: <code>+512M</code></li> <li>Press <code>t</code> to change the type, press <code>L</code> to list types</li> <li>Select the type for <code>EFI System</code><ol> <li>The types seem to differ per motherboard (?), so double check</li> </ol> </li> <li>Don't worry about making/marking as bootable</li> </ol> </li> <li>Make primary partition<ol> <li>Press <code>n</code></li> <li>Partition type: Primary</li> <li>Partition number: 2</li> <li>First sector: continue</li> <li>Last sector: continue</li> <li>Press <code>t</code> to change the type, press <code>L</code> to list types</li> <li>Select the type for <code>Linux filesystem</code><ol> <li>The types seem to differ per motherboard (?), so double check</li> </ol> </li> </ol> </li> <li>Type <code>p</code> to list the paritions and double check<ol> <li>Validate (see Validate drives below)</li> </ol> </li> <li>Type <code>w</code> to write to the drive</li> </ol>"},{"location":"linux/install/#validate-drives","title":"Validate drives","text":"<p>Validate with <code>fdisk -l</code></p> <p>Look for the following:</p> <ul> <li>Disklabel type: <code>GPT</code></li> </ul> <p>It should look like:</p> <pre><code>Disk /dev/nvme1n1: 1.82 TiB, 2000398934016 bytes, 3907029168 sectors\nDisk model: Samsung SSD 980 PRO 2TB\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisklabel type: gpt\nDisk identifier: x\n\nDevice           Start        End    Sectors  Size Type\n/dev/nvme1n1p1    2048    1050623    1048576  512M EFI System\n/dev/nvme1n1p2 1050624 3907028991 3905978368  1.8T Linux filesystem\n</code></pre>"},{"location":"linux/install/#format-boot-partition","title":"Format boot partition","text":"<p><code>mkfs.fat -F 32 /dev/BOOT_PARTITION</code></p>"},{"location":"linux/install/#setup-luks-btrfs","title":"Setup LUKS &amp; btrfs","text":""},{"location":"linux/install/#make-luks-container-and-initialise-btrfs","title":"Make LUKS container and initialise btrfs","text":"<ul> <li>Following https://github.com/egara/arch-btrfs-installation but substituting <code>/dev/mapper/root</code></li> <li>You should be able to follow any guide and do the same</li> </ul> <pre><code>cryptsetup -y -v luksFormat /dev/ROOT_PARTITION\ncryptsetup open /dev/ROOT_PARTITION root\nmkfs.btrfs -L arch /dev/mapper/root\nmount /dev/mapper/root /mnt\n</code></pre> <p>Check mapping works as intended</p> <pre><code>umount /mnt\ncryptsetup close root\ncryptsetup open /dev/ROOT_PARTITION root\nmount /dev/mapper/root /mnt\n</code></pre>"},{"location":"linux/install/#setup-btrfs-subvolumes","title":"Setup BTRFS subvolumes","text":"<pre><code>cd /mnt\nbtrfs subvolume create _active\nbtrfs subvolume create _active/rootvol\nbtrfs subvolume create _active/homevol\nbtrfs subvolume create _snapshots\nbtrfs subvolume create _swap\n</code></pre>"},{"location":"linux/install/#mount-them","title":"Mount them","text":"<ul> <li>For the boot partition, <code>systemd-boot</code> throws a warning if your permissions are too open, somebody on reddit suggested these masks:</li> <li>https://www.reddit.com/r/archlinux/comments/15slhtp/deleted_by_user/</li> </ul> <pre><code>cd ..\numount /mnt\nmount -o subvol=_active/rootvol,compress=zstd:1,discard=async /dev/mapper/root /mnt\nmkdir /mnt/{home,boot,btrfs_root}\nmount -o fmask=0137,dmask=0027 /dev/BOOT_PARTITION /mnt/boot\nmount -o subvol=_active/homevol,compress=zstd:1,discard=async /dev/mapper/root /mnt/home\nmount -o subvol=/,compress=zstd:1,discard=async /dev/mapper/root /mnt/btrfs_root\nmount -o subvol=_swap,discard=async /dev/mapper/root /mnt/swap\n</code></pre>"},{"location":"linux/install/#swap-file","title":"Swap File","text":"<ol> <li>Follow https://wiki.archlinux.org/title/btrfs#Swap_file<ol> <li>Create in the <code>_swap</code> subvolume</li> </ol> </li> <li>Set the swap size to RAM size for hibrenation</li> </ol> <p>Swap files generated with <code>btrfs</code> are excluded from COW</p>"},{"location":"linux/install/#installationselect-the-mirrors","title":"Installation/Select the mirrors","text":"<p>These get copied, so set them up properly now</p> <pre><code>pacman -Syy\npacman -S reflector\nreflector -c AU -f 10 --save /etc/pacman.d/mirrorlist\n</code></pre>"},{"location":"linux/install/#installationinstall-essential-packages","title":"Installation/Install essential packages","text":"<ul> <li>Where <code>CPU_MICROCODE</code> is <code>intel-ucode</code> or <code>amd-ucode</code> or <code>whatever else</code></li> </ul> <pre><code>pacstrap -K /mnt base linux linux-firmware neovim networkmanager dhclient sudo chrony CPU_MICROCODE\n</code></pre>"},{"location":"linux/install/#configure-the-systemfstab","title":"Configure the system/Fstab","text":"<ol> <li>Run <code>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</code></li> <li>In <code>/mnt/etc/fstab</code> remove <code>subvolid=</code> references on each <code>btrfs</code> mount to help with snapshot rollback in the future</li> </ol> <p>It should look like this:</p> <pre><code># Static information about the filesystems.\n# See fstab(5) for details.\n\n# &lt;file system&gt; &lt;dir&gt; &lt;type&gt; &lt;options&gt; &lt;dump&gt; &lt;pass&gt;\n# /dev/mapper/root LABEL=arch\nUUID=x  /           btrfs       rw,relatime,compress=zstd:1,ssd,discard=async,space_cache=v2,subvol=/_active/rootvol    0 0\n\n# /dev/nvme0n1p1\nUUID=x          /boot       vfat        rw,relatime,fmask=0137,dmask=0027,codepage=437,iocharset=ascii,shortname=mixed,utf8,errors=remount-ro   0 2\n\n# /dev/mapper/root LABEL=arch\nUUID=x  /home       btrfs       rw,relatime,compress=zstd:1,ssd,discard=async,space_cache=v2,subvol=/_active/homevol    0 0\n\n# /dev/mapper/root LABEL=arch\nUUID=x  /btrfs_root btrfs       rw,relatime,compress=zstd:1,ssd,discard=async,space_cache=v2,subvol=/   0 0\n\n/swap/swapfile          none            swap            defaults        0 0\n</code></pre>"},{"location":"linux/install/#configure-the-systemlocalization","title":"Configure the system/Localization","text":"<p>Make sure to uncomment <code>en_US.UTF-8 UTF-8</code> and do the rest of the steps, ignore console keyboard layout</p>"},{"location":"linux/install/#configure-the-systemnetwork-configuration","title":"Configure the system/Network configuration","text":"<p>In addition to <code>/etc/hostname</code>, make an <code>/etc/hosts</code> with the following:</p> <pre><code>127.0.0.1 localhost\n::1 localhost\n127.0.0.1 HOSTNAME\n</code></pre>"},{"location":"linux/install/#configure-the-systeminitramfs-configure-the-systemboot-loader","title":"Configure the system/Initramfs &amp; Configure the system/Boot loader","text":""},{"location":"linux/install/#systemd-boot-and-luks-initramfs","title":"systemd-boot and LUKS initramfs","text":"<p>See the following:</p> <ul> <li>https://wiki.archlinux.org/title/systemd-boot</li> <li> <p>https://wiki.archlinux.org/title/dm-crypt/Encrypting_an_entire_system#Configuring_mkinitcpio</p> </li> <li> <p>Setup these hooks: <code>HOOKS=(base systemd autodetect modconf kms keyboard sd-vconsole block sd-encrypt filesystems fsck)</code></p> </li> <li><code>systemd</code> <code>keyboard</code> <code>sd-encrypt</code> are the important ones</li> <li>Add <code>sd-vconsole</code> if using non-default console font/non-US keyboard</li> <li>Remove <code>kms</code> if NVIDIA</li> <li>I've put <code>btrfs</code> in <code>HOOKS</code>, it can probably go in <code>HOOKS</code> after <code>sd-encrypt</code> or <code>keymap</code> (not sure if it matters)</li> <li><code>HOOKS=( ... btrfs ... )</code></li> <li>Run <code>bootctl install</code></li> <li>Re-generate the initramfs via <code>mkinitcpio -P</code></li> </ul> <p>sandcastle: <code>HOOKS=(base systemd autodetect modconf keyboard sd-vconsole sd-network btrfs block sd-dropbear sd-encrypt filesystems fsck)</code></p>"},{"location":"linux/install/#ssh-server-for-remote-luks-decrypt","title":"SSH server for remote LUKS decrypt","text":"<ol> <li>Follow https://wiki.archlinux.org/title/Dm-crypt/Specialties#systemd_based_initramfs_(built_with_mkinitcpio)</li> <li>Install https://aur.archlinux.org/packages/mkinitcpio-systemd-extras</li> <li><code>sudo mkdir -p /etc/luks-remote-decrypt -m 755</code><ol> <li>contents needs to be world readable otherwise it fails</li> </ol> </li> <li>See root files for examples of configs, add public ssh key to <code>/etc/luks-remote-decrypt/root_key</code></li> <li>If using DHCP, make sure the DHCP server does not bind to client ID, as it will differ in the initramFS</li> </ol> <p>In the <code>mkinitcpio</code> file</p> <pre><code>HOOKS=(base systemd autodetect modconf keyboard sd-vconsole sd-network btrfs block sd-dropbear sd-encrypt filesystems fsck)\nSD_DROPBEAR_COMMAND=\"systemd-tty-ask-password-agent --query --watch\"\nSD_DROPBEAR_AUTHORIZED_KEYS=\"/etc/luks-remote-decrypt/root_key\"\nSD_NETWORK_CONFIG=\"/etc/luks-remote-decrypt/systemd-networkd\"\n</code></pre> <p>See in <code>.root_files</code>: https://github.com/itsjfx/dotfiles/tree/master/.root-files/etc/luks-remote-decrypt</p> <p>Check perms:</p> <pre><code>chmod 755 /etc/luks-remote-decrypt/\nchmod 644 /etc/luks-remote-decrypt/root_key\nchmod 755 /etc/luks-remote-decrypt/systemd-networkd\nchmod 644 /etc/luks-remote-decrypt/systemd-networkd/89-ethernet.network\n</code></pre>"},{"location":"linux/install/#wake-on-lan","title":"Wake on LAN","text":"<ul> <li>https://wiki.archlinux.org/title/Wake-on-LAN</li> </ul> <pre><code>nmcli c modify \"Wired connection 1\" 802-3-ethernet.wake-on-lan magic\nnmcli c show \"wired1\" | grep 802-3-ethernet.wake-on-lan\n</code></pre> <p>Not sure if this persists, so enable the systemd unit in root files too <code>sudo systemctl enable wol@enp14s0.service</code></p>"},{"location":"linux/install/#enable-systemd-boot-updating-on-boot","title":"Enable systemd-boot updating on boot","text":"<ul> <li>https://wiki.archlinux.org/title/systemd-boot#systemd_service</li> <li>Run: <code>sudo systemctl enable systemd-boot-update.service</code></li> </ul>"},{"location":"linux/install/#edit-bootloader-config","title":"Edit bootloader config","text":"<p>Edit <code>/boot/loader/loader.conf</code></p> <p>and put</p> <pre><code>default arch.conf\ntimeout 10\nconsole-mode max\neditor no\n</code></pre>"},{"location":"linux/install/#add-a-loader-for-arch","title":"Add a loader for arch","text":"<ul> <li>Edit <code>esp/loader/entries/arch.conf</code></li> <li>Where <code>CPU_MICROCODE</code> is <code>intel-ucode</code> or <code>amd-ucode</code> or <code>whatever else</code></li> <li>Validate the below files are in the <code>/boot</code> folder, if not then do the below<ul> <li><code>vmlinuz-linux</code>: <code>linux</code></li> <li><code>CPU_MICROCODE</code>: <code>package from earlier</code></li> <li><code>initramfs-linux.img</code>: <code>mkinitcpio -P</code></li> </ul> </li> <li>Make sure that your <code>initrd CPU_MICROCODE</code> is BEFORE <code>initrd initramfs-linux.img</code> otherwise you'll get a failure</li> <li>Where UUID is your UUID of your root partition</li> <li>You can use <code>:read ! blkid /dev/ROOT_PARTITION</code> in <code>vim</code> to get it, or the same command in a terminal and type it out</li> <li>Add <code>resume</code> and <code>resume_offset</code> for suspend to disk<ul> <li><code>resume_offset=x</code></li> <li>where <code>x</code> is from https://wiki.archlinux.org/title/Power_management/Suspend_and_hibernate#Acquire_swap_file_offset for BTRFS<ul> <li><code>btrfs inspect-internal map-swapfile -r /swap/swapfile</code></li> </ul> </li> </ul> </li> </ul> <pre><code>title Arch Linux\nsort-key 01\nlinux /vmlinuz-linux\ninitrd /CPU_MICROCODE.img\ninitrd /initramfs-linux.img\noptions rd.luks.name=UUID=root root=/dev/mapper/root rootflags=subvol=_active/rootvol rds.luks.options=discard resume=/dev/mapper/root resume_offset=x rw quiet splash\n</code></pre>"},{"location":"linux/install/#repeat-above-for-fallback-initramfs","title":"Repeat above for fallback-initramfs","text":"<p>Same config, but reference <code>/initramfs-fallback</code> instead</p>"},{"location":"linux/install/#configure-the-systemroot-password","title":"Configure the system/Root password","text":"<p>Don't forget to do this</p>"},{"location":"linux/install/#clock-sync","title":"Clock sync","text":"<p>Using <code>chrony</code> as <code>systemd-timesyncd</code> does not support NTS</p> <ol> <li>Edit <code>/etc/chrony.conf</code> and replace the Arch pool server with the Cloudflare NTS one:<ul> <li><code>server time.cloudflare.com iburst nts</code></li> <li>https://wiki.archlinux.org/title/Chrony#Using_NTS_servers</li> </ul> </li> <li><code>systemctl enable --now chronyd</code></li> <li>Run <code>sudo chronyc -a makestep</code> to force a sync</li> </ol>"},{"location":"linux/install/#reboot","title":"Reboot","text":"<p>Reboot and that's the end of the Arch Installation</p>"},{"location":"linux/install/#bootstrap-user-setup","title":"Bootstrap &amp; User setup","text":""},{"location":"linux/install/#allow-wheel-group-in-sudoers","title":"Allow wheel group in sudoers","text":""},{"location":"linux/install/#create-a-user-account","title":"Create a user account","text":"<ol> <li>Create user</li> <li>Add to wheel group</li> <li>Test sudo</li> </ol>"},{"location":"linux/install/#run-bootstrap-as-user","title":"Run bootstrap as user","text":"<p>Other people: please don't use this script</p> <p>Not tested (sorry future me):</p> <pre><code>curl -fL https://raw.githubusercontent.com/itsjfx/dotfiles/master/scripts/bootstrap/run_bootstrap.sh &gt;run_bootstrap.sh\n\nbash run_bootstrap.sh \n</code></pre>"},{"location":"linux/install/#copy-root-files","title":"Copy root files","text":"<p>Copy the root files <code>~/.root-files/</code> over as they will setup X11 and part of the NVIDIA stuff below correctly</p> <p>TODO have a script to do this and run diffs</p>"},{"location":"linux/install/#nvidia-steps","title":"NVIDIA steps","text":"<p>After installing NVIDIA drivers from bootstrap there's a couple of things needed</p>"},{"location":"linux/install/#remove-nouveaukms-from-mkinitcpio","title":"Remove nouveau/kms from mkinitcpio","text":"<p>I'm not sure if this is needed if you don't install <code>nouveau</code> but listed here https://wiki.archlinux.org/title/NVIDIA#Installation</p> <p>Remove <code>kms</code> from <code>mkinitcpio.conf</code> and regenerate the initramfs</p>"},{"location":"linux/install/#setup-drm-kernel-mode-setting","title":"Setup DRM kernel mode setting","text":"<ul> <li>1.3 DRM kernel mode setting<ul> <li>Should be done in <code>~/.root-files/etc/modprobe.d/nvidia.conf</code></li> <li>Latest drivers are &gt;545 in Arch so no need to set anything in the kernel parameters</li> <li>To check:<ul> <li><code>cat /sys/module/nvidia_drm/parameters/modeset</code> and <code>fbdev</code> should return <code>Y</code></li> </ul> </li> </ul> </li> <li>1.3.1.1 mkinitcpio Add early loading to the kernel<ul> <li>Follow these steps</li> <li>https://wiki.archlinux.org/title/Kernel_mode_setting#mkinitcpio</li> <li>Add <code>MODULES=(... nvidia nvidia_modeset nvidia_uvm nvidia_drm ...)</code> to the <code>mkinitcpio.conf</code></li> <li>Re-generate the initramfs</li> </ul> </li> <li>1.3.1.3 pacman hook pacman hook<ul> <li>Should be done in <code>~/.root-files/etc/pacman.d/hooks/nvidia.hook</code></li> </ul> </li> </ul> <p><code>sudo sysfsutils | less</code> you should see multiple entries from <code>nvidia</code> from earlier</p>"},{"location":"linux/install/#setup-windows-dual-boot","title":"Setup Windows dual boot","text":"<p>I couldn't get this working:</p> <ul> <li>https://forum.endeavouros.com/t/tutorial-add-a-systemd-boot-loader-menu-entry-for-a-windows-installation-using-a-separate-esp-partition/37431</li> </ul> <p>I followed this again and it worked:</p> <ul> <li>https://wiki.archlinux.org/title/systemd-boot#Boot_from_another_disk</li> <li>Get the UEFI shell working: https://wiki.archlinux.org/title/Systemd-boot#UEFI_Shells_or_other_EFI_applications</li> <li>In the UEFI shell, run <code>map</code> to list the partitions</li> <li>Run <code>ls FS0:...</code> and figure out which one is the Windows EFI partition</li> <li>Confirm the <code>bootmgfw.efi</code> file exists by using <code>ls FSX:EFI\\Microsoft\\Boot\\bootmgfw.efi</code></li> <li>I made mine lowercase as it's the correct casing, not sure if its case sensitive</li> <li>I also added <code>sort-key 02</code> to my entry to put it below Arch</li> </ul> <pre><code>title Windows\nsort-key 02\nefi /shellx64.efi\noptions -nointerrupt -nomap -noversion HD0b:EFI\\Microsoft\\Boot\\bootmgfw.efi\n</code></pre>"},{"location":"linux/install/#get-windows-fonts","title":"Get Windows fonts","text":"<p>Probably needed for some stuff.</p> <p>See: https://wiki.archlinux.org/title/Microsoft_fonts#Installation</p> <ul> <li>Copy from a Windows Install</li> <li>or use the AUR provided package which grabs them from the ISO</li> </ul>"},{"location":"linux/install/#snapshots","title":"Snapshots","text":"<p>TODO</p>"},{"location":"linux/proc/","title":"proc","text":"<p><code>man proc</code></p>"},{"location":"linux/proc/#open-files","title":"Open Files","text":"<p>Helpful for troubleshooting what files are opened by a process, you can open file descriptors in <code>ls /proc/PID/fd</code>. It also tells you where stdin/stdout/stderr are going.</p> <p>I generally use <code>strace</code> instead but this can be useful too.</p>"},{"location":"linux/proc/#environment-variables","title":"Environment Variables","text":"<p>You can see environment variables for processes via <code>cat /proc/PID/environ</code>.</p> <p>The output is null-terminated, so <code>cat /proc/PID/environ | tr '\\0' '\\n'</code> will give you more meaningful output.</p> <p>This can be used to search all processes for specific variables, etc.</p>"},{"location":"linux/proc/#executable","title":"Executable","text":"<p>You can find the executable path for a process via <code>ls -la /proc/PID/exe</code>.</p>"},{"location":"mkdocs/material/Overrides/","title":"Overrides","text":"<p>Similar to minima, you can do overrides for <code>mkdocs-material</code>:</p> <p>https://squidfunk.github.io/mkdocs-material/customization/</p> <p>Overrides setup here:</p> <ul> <li>https://github.com/itsjfx/notes/tree/master/overrides</li> <li>https://github.com/itsjfx/notes/blob/master/overrides/partials/actions.html#L3<ul> <li>To change the view button on pages to show the <code>/blob/</code> page instead of the <code>/raw/</code> page on GitHub</li> </ul> </li> </ul>"},{"location":"obsidian/","title":"Index","text":""},{"location":"obsidian/#app-icon-fix-on-i3","title":"App icon fix on i3","text":"<p>Looking online it appears to be an Electron issue</p> <p>App icon was not appearing in my <code>i3</code> tab bar, so I did this quickly:</p> <ol> <li>Download icon from here https://obsidian.md/blog/new-obsidian-icon</li> <li>Settings -&gt; Appearance -&gt; Custom app Icon </li> </ol>"},{"location":"obsidian/plugins/","title":"Index","text":""},{"location":"obsidian/plugins/#plugins-to-check-out","title":"Plugins to check out","text":"<ul> <li>calendar</li> <li>kanban</li> <li>tasks (how well does it work with calendar?)</li> <li> <p>templater (versus in-built templater?)</p> </li> <li> <p>dataview</p> </li> <li>landing page</li> <li>pandoc</li> <li>highlightr</li> <li>excalidraw</li> <li> <p>obsidian-linter</p> <ul> <li>with https://github.com/platers/obsidian-linter/blob/master/docs/rules.md#line-break-at-document-end</li> </ul> </li> <li> <p>obsidian git</p> </li> <li>obsidian livesync</li> </ul>"},{"location":"podman/","title":"Podman","text":""},{"location":"podman/#file-permissions","title":"File permissions","text":"<ul> <li><code>PODMAN_USERNS=keep-id</code><ul> <li>files owned by the current user / rootless</li> <li>unset = files will be owned by root / root container</li> </ul> </li> </ul>"},{"location":"podman/#gui","title":"GUI","text":"<p>Get a GUI working quickly for Debian/Ubuntu</p> <pre><code>apt-get update &amp;&amp; apt-get install -y xvfb x11vnc i3 xterm\nexport DISPLAY=:99\nXvfb :99 -screen 0 1024x768x16 &amp;\nx11vnc -display :99 -forever &amp;\ni3\n</code></pre>"},{"location":"python/defaultdict/","title":"defaultdict","text":"<p>Instead of doing </p> <pre><code>a = {}\nkey = 'b'\nif not key in a:\n    a[key] = []\na[key].append(1)\n</code></pre> <p>You can do</p> <pre><code>from collections import defaultdict\na = defaultdict(list)\nkey = 'b'\na[key].append(1)\n</code></pre> <p>Works with <code>set</code> or <code>int</code>, etc</p>"},{"location":"python/json/","title":"JSON","text":""},{"location":"python/json/#datetime","title":"datetime","text":"<p>When dumping JSON from AWS or something with a <code>datetime</code>, it'll need to get sanitised a specific way</p> <pre><code>def json_dumper(x):\n    if isinstance(x, datetime.datetime):\n        return x.timestamp()\n    return json.JSONEncoder().default(x)\n\nprint(json.dumps(summary, default=json_dumper))\n</code></pre>"},{"location":"python/logging/","title":"Logging","text":""},{"location":"python/logging/#enable-global-logger","title":"Enable global logger","text":"<pre><code>import logging\n\nlogging.basicConfig(level='INFO')\n</code></pre>"},{"location":"python/logging/#simple-tab-based-logger","title":"Simple TAB based logger","text":"<pre><code>import logging\n\nlogging.basicConfig(level='INFO')\nlogging.basicConfig(level='INFO', format='%(levelname)s\\t%(message)s')\n</code></pre>"},{"location":"python/logging/#accepting-log-level-from-cli-args","title":"Accepting log level from CLI args","text":"<pre><code>if __name__ == '__main__':\n    import argparse\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-l', '--log', choices=('debug', 'info', 'warning', 'error', 'critical'), default='info', help=\"Logging level (default: %(default)s)\")\n    args = parser.parse_args()\n    logging.basicConfig(level=getattr(logging, args.log.upper()))\n</code></pre>"},{"location":"python/main/","title":"Main CLI template","text":"<pre><code>import sys\n\nif __name__ == '__main__':\n    try:\n        sys.exit(main())\n    except KeyboardInterrupt:\n        sys.exit(130)\n</code></pre>"},{"location":"python/requests/","title":"Requests","text":"<p>One of my favourite modules</p>"},{"location":"python/requests/#always-fail-on-http","title":"Always fail on HTTP","text":"<pre><code>import logging\nimport requests\n\nsession = requests.Session()\n\ndef response_hook(request, *args, **kwargs):\n    try:\n        request.raise_for_status()\n    except:\n        logging.error('Failed %s request to %s', request.request.method, request.request.url)\n        logging.error('%s', request.text)\n        raise\n\nsession.hooks = {'response': response_hook}\n\ntry:\n    session.get('https://httpstat.us/404')\nexcept requests.exceptions.HTTPError as e:\n    if e.response.status_code != 404:\n        raise\n</code></pre>"},{"location":"python/tab-completion/","title":"Tab completion","text":"<p>Writing a CLI tool and want tab completion... try: https://github.com/iterative/shtab</p>"},{"location":"python/threads/","title":"Threads","text":""},{"location":"python/threads/#threadpoolexcecutor","title":"ThreadPoolExcecutor","text":"<p>Simple example using threads to do something</p> <pre><code>#!/usr/bin/env python3\n\nimport sys\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\nimport time\nimport uuid\nimport random\n\ndef something(payload):\n    print(f'Completing task with payload {payload}...', file=sys.stderr)\n    time.sleep(random.uniform(1, 5))\n    data = str(uuid.uuid4())\n    print(f'Got data {data} for payload {payload}', file=sys.stderr)\n    return str(uuid.uuid4())\n\ndef do_stuff(n):\n    with ThreadPoolExecutor(max_workers=None) as executor:\n        results = [executor.submit(something, i) for i in range(1, n)]\n        for future in as_completed(results):\n            yield future.result()\n\nfor stuff in do_stuff(11):\n    print(stuff)\n</code></pre>"},{"location":"python/threads/#context-threadpool","title":"Context ThreadPool","text":"<pre><code>class ScopedThreadPool(ThreadPoolExecutor):\n    \"\"\"\n    Wrapper around ThreadPoolExecutor that ensures all futures are completed before exiting the context\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.futures = []\n\n    def submit(self, *args, **kwargs):\n        future = super().submit(*args, **kwargs)\n        self.futures.append(future)\n        return future\n\n    def __exit__(self, *args, **kwargs):\n        while True:\n            done, pending = wait(self.futures)\n            # may have futures that creates more futures\n            if len(done) == len(self.futures):\n                break\n\n        result = super().__exit__(*args, **kwargs)\n        if exceptions := [f.exception() for f in self.futures if f.exception()]:\n            if len(exceptions) == 1:\n                raise exceptions[0]\n            raise BaseExceptionGroup('failed', exceptions)\n        return result\n\nwith ScopedThreadPool() as executor:\n    executor.submit(func)\n\nwith ScopedThreadPool() as executor:\n    for region in {'ap-southeast-2', 'us-east-1'}:\n        @executor.submit\n        def job(region=region):\n            print(region)\n</code></pre>"}]}